-- ============================================================================
-- Migration 008: Create Indicator Variants Table
-- ============================================================================
-- Date: 2025-10-29
-- Purpose: Centralize indicator variant storage in QuestDB (replaces JSON files)
--
-- Background:
-- Previously, indicator variants were stored as JSON files in config/indicators/{variant_type}/{id}.json
-- This migration moves variant storage to QuestDB for:
-- - Transactional integrity
-- - Concurrent access safety
-- - Query performance (indexed searches)
-- - Soft delete capability
-- - Audit trail
--
-- Changes:
-- 1. Create indicator_variants table with comprehensive schema
-- 2. Add indexes for fast filtering by type, user, and scope
-- 3. Support soft delete pattern (is_deleted flag)
-- 4. Store parameters as validated JSON string
-- 5. Track ownership and visibility via user_id and scope
--
-- ============================================================================

-- ============================================================================
-- TABLE: indicator_variants
-- ============================================================================
-- Stores indicator variant configurations (parameterized system indicators)
--
-- A variant is a user-defined configuration of a system indicator with specific parameters.
-- Example: TWPA (system indicator) → "TWPA 5min" (variant with t1=300, t2=0)
--
-- IMPORTANT DESIGN DECISIONS:
-- 1. Parameters stored as JSON string (not EAV, not typed columns)
--    - WHY: Each indicator has different parameters (TWPA: t1,t2; VELOCITY: t1,t3,d,r)
--    - Validation happens at write time via IndicatorAlgorithm.get_parameters()
--    - Type safety enforced by application layer
--
-- 2. SYMBOL type for base_indicator_type and variant_type
--    - WHY: Fast filtering, automatic indexing, efficient storage
--    - QuestDB stores SYMBOL as 32-bit int internally
--
-- 3. Soft delete (is_deleted flag) instead of physical DELETE
--    - WHY: Data preservation, audit trail, rollback capability
--    - Active variants filtered with WHERE is_deleted = false
--
-- 4. Scope-based visibility (similar to indicators table)
--    - "global": visible to all users
--    - "user_{user_id}": private to specific user
--    - "session_{session_id}": scoped to session (temporary)
--
-- Expected volume: 100-1000 variants per deployment
-- Growth rate: Low (user-created variants)
-- ============================================================================

CREATE TABLE IF NOT EXISTS indicator_variants (
    -- === PRIMARY IDENTITY ===
    id STRING,                                      -- UUID (variant identifier)
                                                    -- Example: "7eb32fcd-30e5-4399-8487-0e83f8e77d03"
                                                    -- Generated by application (uuid.uuid4())

    name STRING,                                    -- User-facing variant name
                                                    -- Example: "TWPA 5 minutes", "Price Velocity Fast"
                                                    -- Used in UI dropdowns and charts

    -- === TYPE CLASSIFICATION ===
    base_indicator_type SYMBOL capacity 128 CACHE, -- System indicator type
                                                    -- Example: TWPA, PRICE_VELOCITY, MOMENTUM_REVERSAL_INDEX
                                                    -- Must match IndicatorType enum in code
                                                    -- SYMBOL type: fast filtering, auto-indexed
                                                    -- Capacity 128 = max 128 unique indicator types

    variant_type SYMBOL capacity 16 CACHE,          -- UI category for grouping and display
                                                    -- Values: general, risk, price, stop_loss, take_profit, close_order
                                                    -- Determines chart placement:
                                                    --   - general, risk → secondary chart
                                                    --   - price, stop_loss, take_profit, close_order → main chart
                                                    -- See VariantType enum in streaming_indicator_engine.py

    -- === DESCRIPTION ===
    description STRING,                             -- User-provided description of variant purpose
                                                    -- Example: "Measures price velocity over 5 minute window"
                                                    -- Displayed in UI tooltips and variant details

    -- === PARAMETERS (CORE DATA) ===
    parameters STRING,                              -- Validated JSON string containing algorithm parameters
                                                    -- Structure defined by IndicatorAlgorithm.get_parameters()
                                                    -- Examples:
                                                    --   TWPA: {"t1": 300.0, "t2": 0.0, "refresh_interval_seconds": 1.0}
                                                    --   VELOCITY: {"t1": 10.0, "t3": 40.0, "d": 10.0, "r": 1.0}
                                                    --   RSI: {"period": 14}
                                                    -- Validation enforced at write time by IndicatorVariantRepository
                                                    -- Type coercion: "300" → 300.0, "true" → true
                                                    -- Range validation: min_value <= value <= max_value

    schema_version INT,                             -- Parameter schema version for future migrations
                                                    -- Default: 1
                                                    -- If algorithm changes parameters, increment version
                                                    -- Enables backward compatibility and data migration

    -- === OWNERSHIP & VISIBILITY ===
    is_system BOOLEAN,                              -- System-provided (true) vs user-created (false)
                                                    -- System variants: pre-defined, immutable
                                                    -- User variants: editable, deletable
                                                    -- Default: false for new variants

    created_by STRING,                              -- Username or user ID who created this variant
                                                    -- Example: "user_123", "admin", "john.doe"
                                                    -- Used for audit trail

    user_id STRING,                                 -- Owner user ID
                                                    -- Example: "user_123"
                                                    -- NULL for system/global variants
                                                    -- Used for access control and filtering

    scope STRING,                                   -- Visibility scope (access control)
                                                    -- Values:
                                                    --   "global" - visible to all users
                                                    --   "user_{user_id}" - private to specific user
                                                    --   "session_{session_id}" - scoped to session (temporary)
                                                    -- Example: "global", "user_123", "session_abc"
                                                    -- Query: WHERE scope IN ('global', 'user_123')

    -- === AUDIT TRAIL ===
    created_at TIMESTAMP,                           -- Variant creation timestamp
                                                    -- Set once at creation, never modified

    updated_at TIMESTAMP,                           -- Last modification timestamp
                                                    -- Updated on parameter changes or metadata edits

    -- === SOFT DELETE ===
    deleted_at TIMESTAMP,                           -- Soft delete timestamp
                                                    -- NULL = active variant
                                                    -- NOT NULL = deleted variant (with deletion time)
                                                    -- Enables undelete and audit trail

    is_deleted BOOLEAN                              -- Soft delete flag for fast filtering
                                                    -- false = active variant (default)
                                                    -- true = deleted variant
                                                    -- All queries should filter: WHERE is_deleted = false
                                                    -- Indexes created with WHERE clause for efficiency
);

-- ============================================================================
-- INDEXES FOR PERFORMANCE
-- ============================================================================
-- All indexes exclude soft-deleted records for query efficiency
-- QuestDB supports CREATE INDEX for non-time-series columns
--
-- Index selection based on expected query patterns:
-- 1. Filter by base_indicator_type (most common: "show all TWPA variants")
-- 2. Filter by variant_type (common: "show all general indicators")
-- 3. Filter by user_id (common: "show my variants")
-- 4. Filter by scope (common: "show global + my variants")
--
-- Index size estimate: ~10KB per 1000 variants (minimal overhead)
-- ============================================================================

-- Index 1: Filter by system indicator type
-- Query: SELECT * FROM indicator_variants WHERE base_indicator_type = 'TWPA' AND is_deleted = false
CREATE INDEX IF NOT EXISTS idx_variants_base_type
ON indicator_variants(base_indicator_type)
WHERE is_deleted = false;

-- Index 2: Filter by UI category
-- Query: SELECT * FROM indicator_variants WHERE variant_type = 'general' AND is_deleted = false
CREATE INDEX IF NOT EXISTS idx_variants_type
ON indicator_variants(variant_type)
WHERE is_deleted = false;

-- Index 3: Filter by user ownership
-- Query: SELECT * FROM indicator_variants WHERE user_id = 'user_123' AND is_deleted = false
CREATE INDEX IF NOT EXISTS idx_variants_user
ON indicator_variants(user_id)
WHERE is_deleted = false;

-- Index 4: Filter by scope (visibility)
-- Query: SELECT * FROM indicator_variants WHERE scope IN ('global', 'user_123') AND is_deleted = false
CREATE INDEX IF NOT EXISTS idx_variants_scope
ON indicator_variants(scope)
WHERE is_deleted = false;

-- ============================================================================
-- USAGE EXAMPLES
-- ============================================================================

-- Example 1: Insert new variant
-- INSERT INTO indicator_variants (
--     id, name, base_indicator_type, variant_type, description,
--     parameters, schema_version, is_system, created_by, user_id, scope,
--     created_at, updated_at, deleted_at, is_deleted
-- ) VALUES (
--     '7eb32fcd-30e5-4399-8487-0e83f8e77d03',
--     'TWPA 5 minutes',
--     'TWPA',
--     'general',
--     'Time-weighted price average over 5 minute window',
--     '{"t1": 300.0, "t2": 0.0, "refresh_interval_seconds": 1.0}',
--     1,
--     false,
--     'user_123',
--     'user_123',
--     'user_123',
--     systimestamp(),
--     systimestamp(),
--     NULL,
--     false
-- );

-- Example 2: Get all active variants for user (global + personal)
-- SELECT * FROM indicator_variants
-- WHERE is_deleted = false
--   AND scope IN ('global', 'user_123')
-- ORDER BY created_at DESC;

-- Example 3: Get all TWPA variants
-- SELECT * FROM indicator_variants
-- WHERE base_indicator_type = 'TWPA'
--   AND is_deleted = false
-- ORDER BY name;

-- Example 4: Get all general category variants
-- SELECT * FROM indicator_variants
-- WHERE variant_type = 'general'
--   AND is_deleted = false
-- ORDER BY name;

-- Example 5: Update variant parameters
-- UPDATE indicator_variants
-- SET parameters = '{"t1": 600.0, "t2": 0.0, "refresh_interval_seconds": 2.0}',
--     updated_at = systimestamp()
-- WHERE id = '7eb32fcd-30e5-4399-8487-0e83f8e77d03'
--   AND is_deleted = false;

-- Example 6: Soft delete variant
-- UPDATE indicator_variants
-- SET is_deleted = true,
--     deleted_at = systimestamp()
-- WHERE id = '7eb32fcd-30e5-4399-8487-0e83f8e77d03';

-- Example 7: Undelete variant (rollback)
-- UPDATE indicator_variants
-- SET is_deleted = false,
--     deleted_at = NULL
-- WHERE id = '7eb32fcd-30e5-4399-8487-0e83f8e77d03';

-- Example 8: Get variant by ID
-- SELECT * FROM indicator_variants
-- WHERE id = '7eb32fcd-30e5-4399-8487-0e83f8e77d03'
--   AND is_deleted = false;

-- ============================================================================
-- MIGRATION NOTES
-- ============================================================================
--
-- DATA MIGRATION:
-- - NO automatic migration from JSON files
-- - Users will create new variants via UI/API
-- - Old JSON files can be manually imported if needed
--
-- BACKWARD COMPATIBILITY:
-- - StreamingIndicatorEngine.create_variant() will become async
-- - StreamingIndicatorEngine.update_variant_parameters() will become async
-- - StreamingIndicatorEngine.delete_variant() will become async
-- - All callers must add 'await' keyword
--
-- DEPLOYMENT CHECKLIST:
-- 1. Run this migration: .\Install-QuestDB.ps1
-- 2. Verify table creation: SELECT * FROM tables() WHERE table_name = 'indicator_variants'
-- 3. Verify indexes: Check query performance
-- 4. Deploy IndicatorVariantRepository code
-- 5. Update StreamingIndicatorEngine to use repository
-- 6. Update API endpoints to await async methods
-- 7. Test variant CRUD operations end-to-end
--
-- ROLLBACK PLAN:
-- If migration fails or needs to be reverted:
-- - DROP TABLE indicator_variants;
-- - DROP INDEX idx_variants_base_type;
-- - DROP INDEX idx_variants_type;
-- - DROP INDEX idx_variants_user;
-- - DROP INDEX idx_variants_scope;
--
-- ============================================================================
-- VERIFICATION QUERIES
-- ============================================================================

-- Check that table was created
-- SELECT table_name, designatedTimestamp, partitionBy, walEnabled
-- FROM tables()
-- WHERE table_name = 'indicator_variants';

-- Check table structure
-- SHOW COLUMNS FROM indicator_variants;

-- Check indexes
-- SHOW INDEXES FROM indicator_variants;

-- Count active variants (should be 0 initially)
-- SELECT COUNT(*) as active_variants
-- FROM indicator_variants
-- WHERE is_deleted = false;

-- ============================================================================
-- END OF MIGRATION
-- ============================================================================
