# Python Project Configuration for FX_code_AI
# Generated: 2025-10-28
# Purpose: Configure code quality tools (isort, black, pytest, etc.)

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "fx_code_ai"
version = "1.0.0"
description = "Advanced FX Trading System with AI-powered indicators"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "FX Code AI Team"}
]

[tool.isort]
# Import sorting configuration
profile = "black"
line_length = 120
src_paths = ["src", "tests", "database"]
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Skip generated files
skip_gitignore = true
skip = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "node_modules",
    ".eggs",
    "*.egg-info",
    "build",
    "dist"
]

# Import order enforcement
force_single_line = false
force_sort_within_sections = true

# Grouping
force_to_top = []
known_third_party = [
    "fastapi",
    "pydantic",
    "pandas",
    "numpy",
    "asyncpg",
    "redis",
    "pytest"
]

[tool.black]
# Code formatting configuration
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules

  # files
  | .*_pb2\.py  # protobuf generated files
)/
'''

[tool.pytest.ini_options]
# Pytest configuration
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "-ra",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "asyncio: Async tests",
]

[tool.coverage.run]
# Coverage configuration
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]
precision = 2
show_missing = true

[tool.mypy]
# Type checking configuration
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true when ready for strict typing
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "pandas.*,numpy.*,asyncpg.*"
ignore_missing_imports = true

[tool.ruff]
# Ruff linter configuration (modern, fast alternative to flake8)
line-length = 120
target-version = "py310"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # function calls in argument defaults
    "C901",   # too complex (allow complex functions)
    "E402",   # module level import not at top (for conditional imports)
]
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.per-file-ignores]
# Allow unused imports in __init__.py files
"__init__.py" = ["F401", "F403"]
# Allow print statements in scripts
"scripts/*.py" = ["T201"]
"database/*.py" = ["T201"]

[tool.ruff.isort]
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.bandit]
# Security linter configuration
exclude_dirs = [
    "/tests",
    "/.venv",
    "/venv",
]
skips = [
    "B101",  # assert_used (allow asserts in tests)
    "B601",  # paramiko_calls (we use it intentionally)
]

[tool.pylint.MASTER]
init-hook='import sys; sys.path.insert(0, "src")'
jobs = 4
persistent = true

[tool.pylint.MESSAGES_CONTROL]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "W0212",  # protected-access
    "W0511",  # fixme
]

[tool.pylint.FORMAT]
max-line-length = 120

[tool.pylint.DESIGN]
max-args = 10
max-attributes = 15
max-locals = 25
max-statements = 75
